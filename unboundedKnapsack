class Solution{
public:

    int maxValue(int index , vector<vector<int>> &dp , int wt[] , int val[],int W)
    {
        if(W==0) return 0;
        if(index==0 && W>wt[index]) return W/wt[index]*val[0];
        if(index<0) return 0;
        if(dp[index][W]!=-1) return dp[index][W];
        int pick=0;
        int notpick=0;
        if(W>=wt[index])
        {
            pick=val[index]+maxValue(index,dp,wt,val,W-wt[index]);
        }
        notpick=maxValue(index-1,dp,wt,val,W);
        return dp[index][W] = max(pick,notpick);
    }

    int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
        vector<vector<int>> dp (N+1,vector<int>(W+1,-1));
        return maxValue(N-1,dp,wt,val,W);
    }
};
