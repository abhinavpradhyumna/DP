int longest(int left , string s , int right , vector<vector<int>> &dp)
    {
        if(left>right) return 0;
        if(left==right)
        {
            return 1;
        }
        if(dp[left][right]!=-1) return dp[left][right];
        if(s[left]==s[right])
        {
            return dp[left][right]=2+longest(left+1,s,right-1,dp);
        }
        return dp[left][right]=max(longest(left+1,s,right,dp),longest(left,s,right-1,dp));
    }

    int longestPalindromeSubseq(string s) {
        if(s.length()==1) return 1;
        vector<vector<int>> dp (s.length()+1,vector<int>(s.length()+1,-1));
        return longest(0,s,s.length()-1,dp);
    }
